- name: setup nodes
  hosts: control_plane,workers
  vars:
    k8s_version: v1.31
    crio_version: v1.30
  tasks:
    - name: Download Kubernetes repository GPG key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/{{k8s_version}}/deb/Release.key
        dest: /tmp/kubernetes-release.key
        mode: '0644'

    - name: Convert K8S GPG key to keyring format
      command: "gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-release.key"
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes APT repository configuration
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{k8s_version}}/deb/ /
        mode: '0644'

    # CRI-O
    - name: Download CRI-O repository GPG key
      get_url:
        url: https://pkgs.k8s.io/addons:/cri-o:/stable:/{{crio_version}}/deb/Release.key
        dest: /tmp/cri-o-release.key
        mode: '0644'

    - name: Convert CRI-O GPG key to keyring format
      command: "gpg --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg /tmp/cri-o-release.key"
      args:
        creates: /etc/apt/keyrings/cri-o-apt-keyring.gpg

    - name: Add CRI-O APT repository configuration
      copy:
        dest: /etc/apt/sources.list.d/cri-o.list
        content: |
          deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/stable:/{{crio_version}}/deb/ /
        mode: '0644'

    - name: Update apt package list
      apt:
        update_cache: true

    - name: Create Kubernetes sysctl configuration
      copy:
        dest: /etc/sysctl.d/kubernetes.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
        mode: '0644'

    - name: Apply sysctl settings
      command: sysctl --system

    - name: Install cri-o, kubelet, kubeadm, and kubectl
      apt:
        name:
          - cri-o
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: true
        allow_downgrade: true
        autoremove: false
        force: yes

    - name: Hold kubeadm
      ansible.builtin.dpkg_selections:
        name: kubeadm
        selection: hold

    - name: Hold kubelet
      ansible.builtin.dpkg_selections:
        name: kubelet 
        selection: hold

    - name: Hold kubectl
      ansible.builtin.dpkg_selections:
        name: kubectl 
        selection: hold

    - name: Disable swap
      command: swapoff -a
      ignore_errors: yes

    - name: Enable and start kubelet service
      systemd:
        name: kubelet
        enabled: true
        state: started

    - name: Enable and start cri-o service
      systemd:
        name: cri-o 
        enabled: true
        state: started
- name: start control plane
  hosts: control_plane
  tasks:
    - name: Initialize Kubernetes control plane
      shell: |
        kubeadm init --cri-socket=unix:///var/run/crio/crio.sock
      args:
        creates: /etc/kubernetes/admin.conf
    - name: create .kube directory
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
    - name: Copy admin.conf to kubeconfig
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        mode: "0644"
        backup: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        remote_src: true
    - name: Change ownership of kubeconfig
      file:
        path: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
- name: Retrieve kubeadm join command
  hosts: control_plane
  tasks:
    - name: Retrieve kubeadm join command
      command:
        kubeadm token create --print-join-command
      register: KUBEADM_JOIN_CMD
    #- name: Display all variables/facts known for a host
    #  debug:
    #    var: hostvars[groups['control_plane'][0]]['KUBEADM_JOIN_CMD'].stdout
    #  tags: debug_info
- name: Join worker nodes
  hosts: workers
  tasks:
    - name: Run kubeadm join command
      command: "{{ hostvars[groups['control_plane'][0]]['KUBEADM_JOIN_CMD'].stdout }}"

- name: Get kubeconfig
  hosts: control_plane
  tasks:
    - name: Copy admin.conf to localhost
      fetch:
        src: "{{ ansible_env.HOME }}/.kube/config"
        dest: ./kubeconfig
        flat: yes
        remote_src: true
